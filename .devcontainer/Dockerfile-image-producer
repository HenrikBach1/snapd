# See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.209.6/containers/alpine/.devcontainer/base.Dockerfile

# [Choice] Alpine version: 3.14, 3.13, 3.12, 3.11
# HB1: It seems that build.args doesn't pass to Dockerfile build from .devcontainer:
ARG VARIANT="3.15"

ARG remoteUser=vscode
ARG PACKAGER_NAME="Henrik Bach"
ARG PACKAGER_EMAIL="bach.henrik@gmail.com"

FROM mcr.microsoft.com/vscode/devcontainers/base:0-alpine-${VARIANT}

# HB1: It seems that build.args doesn't pass to Dockerfile build from .devcontainer:
ENV remoteUser=vscode
ENV PACKAGER_NAME="Henrik Bach"
ENV PACKAGER_EMAIL="bach.henrik@gmail.com"

ENV DockerfileContext="/home/sad/projects/snapd/snapd-github-public-master-live-devcontainer-alpine"
ENV SNAPD_ABUILD_DIR=${DockerfileContext}/./packaging/alpine-3.14/snapd/

        # EOL
RUN apk update \
    && apk upgrade \
    && apk add --no-cache \
        alpine-sdk \
        apparmor \
        curl \
        doas \
        fennel \
        git \
        go \
        libcap \
        libseccomp \
        lua5.3-dev \
        luarocks5.3 \
        make \
        nano \
        openrc \
        openssl-dev \
        sed \
        shadow \
        shellcheck \
        squashfs-tools \
        su-exec \
        sudo \
        wget \
        xfsprogs

        # systemd \
        # libsystemd \
        # go-tools \
        # \
        # python \
        # python-docutils \
        # EOL
# Install python/pip
ENV PYTHONUNBUFFERED=1
RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
RUN pip3 install --no-cache --upgrade pip setuptools
RUN echo "$remoteUser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
RUN echo "permit nopass keepenv :$remoteUser" | sudo tee -a /etc/doas.conf

###############################################################################
# Switch to remoteUser
###############################################################################

# Following overall: https://wiki.alpinelinux.org/wiki/Creating_an_Alpine_package:

USER $remoteUser

RUN doas addgroup $remoteUser abuild

# HB1: TODO: RUN MKDIR(/var/cache/distfiles)
RUN doas mkdir -p /var/cache/distfiles \
    && doas chgrp abuild -R /var/cache/distfiles \
    && doas chmod g+w -R /var/cache/distfiles

#------------------------------------------------------------------------------

# # To build toAPK:
# ENV LUA_ROCKS=luarocks-5.3
# ENV TOAPK_DIR="/data/alpine/toapk"
# # HB1: TODO: RUN GIT_CLONE(https://gitlab.com/Durrendal/toAPK.git, ${TOAPK_DIR})
# RUN doas mkdir -p ${TOAPK_DIR} \
#     && doas git clone https://gitlab.com/Durrendal/toAPK.git ${TOAPK_DIR} \
#     && doas chgrp abuild -R ${TOAPK_DIR} \
#     && doas chmod g+w -R ${TOAPK_DIR} \
#     && sudo ln -s ${TOAPK_DIR}/src/toAPK.fnl /usr/bin <------------------ Fails: https://gitlab.com/Durrendal/toAPK/-/issues/4

#     # Tag : Commit
#     # v1.0: 621b1479
#     # && git checkout 621b1479 \
#     #
#     # && $LUA_ROCKS install luasec --local \
#     # EOL
# RUN cd ${TOAPK_DIR} \
#     && $LUA_ROCKS install luasocket --local
#     && make compile-bin \
#     && doas make install-bin \
#     && make compile-lua <------------------ Fails: https://gitlab.com/Durrendal/toAPK/-/issues/4
# #     && doas make install-lua
# #     && make test-all

# # To build aports: Is this necessary?:
# ENV APORTS_DIR="/data/alpine/aports"
# # HB1: TODO: RUN GIT_CLONE(https://gitlab.alpinelinux.org/alpine/aports, ${APORTS_DIR})
# RUN doas mkdir -p ${APORTS_DIR} \
#     && doas git clone https://gitlab.alpinelinux.org/alpine/aports ${APORTS_DIR} \
#     && doas chgrp abuild -R ${APORTS_DIR} \
#     && doas chmod g+w -R ${APORTS_DIR}

RUN git config --global user.name "${PACKAGER_NAME}"
RUN git config --global user.email "${PACKAGER_EMAIL}"

RUN doas sed -i s/#PACKAGER=/PACKAGER=/g /etc/abuild.conf
RUN doas sed -i s/#MAINTAINER=/MAINTAINER=/g /etc/abuild.conf
RUN doas sed -i 's/your@email.address/'"${PACKAGER_EMAIL}"'/g' /etc/abuild.conf
RUN doas sed -i 's/Your\ Name/'"${PACKAGER_NAME}"'/g' /etc/abuild.conf

RUN mkdir -p /home/vscode/.abuild \
    && touch /home/vscode/.abuild/abuild.conf \
    && cp /etc/abuild.conf /home/vscode/.abuild

RUN abuild-keygen -ain

WORKDIR ${SNAPD_ABUILD_DIR}
RUN cd ${SNAPD_ABUILD_DIR} \
    && abuild checksum && abuild -r
